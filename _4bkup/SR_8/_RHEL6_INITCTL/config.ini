;pre_restart_command = if configured, will be executed before the restart command for any strategy
;restart_command = /usr/local/bin/custom_restart.sh %s - if configured, will be used instead of default behavior for any strategy
;health_check_command = pgrep %s if configured, will be used to check the health
;system_name = nume_real_pe_server - if configured, will be used instead of process_name for any strategy
;restart_strategy = auto, custom, service, process
;health_check_timeout = 5 if configured, will be used to set the timeout for health
;restart_delay = if configured, will be used to set the delay before the restart command is executed
;max_attempts = if configured, will be used to set the maximum number of restart attempts before giving up


;  restart_command = initctl restart %s
;  system_name = nume2
;  Dacă vrei să forțezi o comandă fixă, scrie comanda completă și ignoră system_name.

[database]
host = localhost
user = root
password = Parola22@@
database = v_process_monitor

[monitor]
; Check interval in seconds (2 minutes)
check_interval = 120
; Maximum number of restart failures before circuit breaker opens
max_restart_failures = 3
; Circuit breaker reset time in seconds (10 minutes)
circuit_reset_time = 600

[logging]
; Maximum log file size in KB before rotation (default: 5MB)
max_log_size = 5120
; Number of log files to keep (default: 5)
log_files_to_keep = 5


[process.default]
; Default settings for all processes
; restart_command and system_name can be configured for any strategy (service, custom, process)
restart_strategy = auto
health_check_command = pgrep %s
health_check_timeout = 5
restart_delay = 2
max_attempts = 2

[process.custom_example]
restart_strategy = custom
restart_command = /usr/local/bin/custom_restart.sh %s
health_check_command = pgrep %s
health_check_timeout = 10
restart_delay = 3
max_attempts = 2


[process.sshd]
restart_strategy = custom
restart_command = initctl restart sshd
health_check_command = initctl status sshd | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

[process.firewalld]
restart_strategy = custom
restart_command = initctl restart firewalld
health_check_command = initctl status firewalld | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

[process.NetworkManager]
restart_strategy = custom
restart_command = initctl restart NetworkManager
health_check_command = initctl status NetworkManager | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

;Example of a process with different name from the service name
;Note: system_name and restart_command work with any strategy (service, custom, process)
[process.rsyslogd]
system_name = rsyslog
restart_strategy = service
health_check_command = initctl status rsyslog | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

[process.chronyd]
restart_strategy = custom
restart_command = initctl restart chronyd
health_check_command = initctl status chronyd | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

[process.cupsd]
restart_strategy = custom
restart_command = initctl restart cups
health_check_command = initctl status cups | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3


[process.tuned]
restart_strategy = custom
restart_command = initctl restart tuned
health_check_command = initctl status tuned | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

[process.auditd]
restart_strategy = custom
restart_command = initctl restart auditd
health_check_command = initctl status auditd | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3


;Process restart strategy for crond
[process.crond]
restart_strategy = process
health_check_command = pgrep cron
health_check_timeout = 5
restart_delay = 2
max_attempts = 2

[process.httpd]
restart_strategy = custom
restart_command = initctl restart httpd
health_check_command = initctl status httpd | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3


[process.podman]
restart_strategy = custom
restart_command = initctl restart podman
health_check_command = initctl status podman | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

;Example: Using restart_command with service strategy
;This shows that restart_command works with any strategy, not just custom
[process.example_service]
restart_strategy = service
restart_command = /usr/local/bin/custom_service_restart.sh
system_name = example-service
health_check_command = initctl status example-service | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

;Example: Custom strategy with separate restart_command and different system_name
;This demonstrates the flexibility of custom strategy with custom restart logic
[process.custom_example_advanced]
restart_strategy = custom
restart_command = /usr/local/bin/advanced_restart.sh
system_name = advanced-service
health_check_command = initctl status advanced-service | grep -q start/running
health_check_timeout = 10
restart_delay = 3
max_attempts = 2

;Example: Service strategy with different name in system vs database
;When the process name in database differs from the actual service name in system
[process.mysql_database]
restart_strategy = service
system_name = mariadb
health_check_command = initctl status mariadb | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

;Another example: Service strategy with different naming convention
[process.nginx_web]
restart_strategy = service
system_name = nginx
health_check_command = initctl status nginx | grep -q start/running
health_check_timeout = 5
restart_delay = 5
max_attempts = 3

